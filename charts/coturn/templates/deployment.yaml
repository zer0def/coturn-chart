apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-coturn
  labels:
{{ include "labels" . | indent 4 }}
spec:
{{- if ne .Values.deploymentKind "DaemonSet" }}
  replicas: {{ .Values.replicas }}
{{- end }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ .Release.Name }}-coturn
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ .Release.Name }}-coturn
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      securityContext:
        readOnlyRootFilesystem: {{ .Values.securityContext.readOnlyRootFilesystem }}
        allowPrivilegeEscalation: {{ .Values.securityContext.allowPrivilegeEscalation }}
        capabilities:
          add: {{ .Values.securityContext.capabilities.add }}
          drop: {{ .Values.securityContext.capabilities.drop }}
      initContainers:
        {{- if .Values.postgresql.enabled }}
        - name: postgresql-isready
          image: {{ .Values.postgresql.image.repository }}:{{ .Values.postgresql.image.tag }}
          env:
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: {{ include "database.secretName" . }}
                  {{- if and .Values.externalDatabase.enabled .Values.externalDatabase.secretKeys.username }}
                  key: {{ .Values.externalDatabase.secretKeys.username }}
                  {{ else }}
                  key: {{ .Values.postgresql.global.postgresql.auth.secretKeys.username }}
                  {{- end }}
            {{- if .Values.externalDatabase.enabled  }}
            - name: DATABASE_HOSTNAME
              valueFrom:
                secretKeyRef:
                  name: {{ include "database.secretName" . }}
              {{- if .Values.externalDatabase.secretKeys.hostname }}
                  key: {{ .Values.externalDatabase.secretKeys.hostname }}
              {{- else }}
                  key: hostname
              {{- end }}
            {{- end }}
          command:
            - "sh"
            - "-c"
            - "until pg_isready -h $DATABASE_HOSTNAME -U $POSTGRES_USER ; do sleep 2 ; done"
        {{- end }}
        - name: add-secret-values-to-config
          image: "mikefarah/yq:latest"
          imagePullPolicy: Always
          env:
            - name: USER
              valueFrom:
                secretKeyRef:
                  name: {{ include "coturn.auth.secretName" . }}
                  {{- if and .Values.coturn.auth.existingSecret .Values.coturn.auth.secretKeys.username }}
                  key: {{ .Values.coturn.auth.secretKeys.username }}
                  {{ else }}
                  key: username
                  {{- end }}
            - name: PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "coturn.auth.secretName" . }}
                  key: {{ .Values.coturn.auth.secretKeys.password }}
            {{- if or .Values.externalDatabase.enabled .Values.postgresql.enabled }}
            {{- if .Values.externalDatabase.enabled }}
            - name: DATABASE_HOSTNAME
              valueFrom:
                secretKeyRef:
                  name: {{ include "database.secretName" . }}
              {{- if .Values.externalDatabase.secretKeys.hostname }}
                  key: {{ .Values.externalDatabase.secretKeys.hostname }}
              {{- else }}
                  key: hostname
              {{- end }}
            {{- end }}
            - name: DATABASE_USER
              valueFrom:
                secretKeyRef:
                  name: {{ include "database.secretName" . }}
                  {{- if and .Values.externalDatabase.enabled .Values.externalDatabase.secretKeys.username }}
                  key: {{ .Values.externalDatabase.secretKeys.username }}
                  {{ else }}
                  key: {{ .Values.postgresql.global.postgresql.auth.secretKeys.username }}
                  {{- end }}
            - name: DATABASE_PASS
              valueFrom:
                secretKeyRef:
                  name: {{ include "database.secretName" . }}
                  {{- if and .Values.externalDatabase.enabled .Values.externalDatabase.secretKeys.password }}
                  key: {{ .Values.externalDatabase.secretKeys.password }}
                  {{ else }}
                  key: {{ .Values.postgresql.global.postgresql.auth.secretKeys.userPasswordKey }}
                  {{- end }}
            - name: DATABASE
              valueFrom:
                secretKeyRef:
                  name: {{ include "database.secretName" . }}
                  {{- if and .Values.externalDatabase.enabled .Values.externalDatabase.secretKeys.database }}
                  key: {{ .Values.externalDatabase.secretKeys.database }}
                  {{ else }}
                  key: {{ .Values.postgresql.global.postgresql.auth.secretKeys.database }}
                  {{- end }}
            {{- end }}
          command:
            - /bin/sh
            - -ec
            - |
              cp /initial/turnserver.conf /data/turnserver.yaml && \
              export USER_STR="$USER:$PASSWORD" && \
              yq eval -i '.user = env(USER_STR)' /data/turnserver.yaml && \
              export CONNECTION_STRING="host=$DATABASE_HOSTNAME dbname=$DATABASE user=$DATABASE_USER password=$DATABASE_PASS connect_timeout=30" && \
              {{- if or .Values.externalDatabase.enabled .Values.postgresql.enabled }}
              yq eval '.psql-userdb = env(CONNECTION_STRING)' /data/turnserver.yaml && \
              {{- end }}
              sed -i 's/: /=/' /data/turnserver.yaml && \
              cat /extra/turnserver.conf >> /data/turnserver.yaml && \
              echo 'lt-cred-mech' >> /data/turnserver.yaml && \
              mv /data/turnserver.yaml /data/turnserver.conf
          volumeMounts:
            - name: {{ .Release.Name }}-initial-config
              mountPath: "/initial"
            - name: {{ .Release.Name }}-extra-config
              mountPath: /extra
            - name: {{ .Release.Name }}-config
              mountPath: /data
      containers:
        - name: "coturn"
          image: {{ include "coturn.image" . }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          args: ["-c", "/turnserver.conf"]
          ports:
            - name: turn-udp
              containerPort: {{ .Values.coturn.ports.listening }}
              protocol: UDP
              {{- if .Values.hostPort }}
              hostPort: {{ .Values.coturn.ports.listening }}
              {{- end }}
            - name: turn-tcp
              containerPort: {{ .Values.coturn.ports.listening }}
              protocol: TCP
              {{- if .Values.hostPort }}
              hostPort: {{ .Values.coturn.ports.listening }}
              {{- end }}
            - name: turn-tcp-tls
              containerPort: {{ .Values.coturn.ports.tlsListening }}
              protocol: TCP
              {{- if .Values.hostPort }}
              hostPort: {{ .Values.coturn.ports.tlsListening }}
              {{- end }}
            - name: turn-udp-dtls
              containerPort: {{ .Values.coturn.ports.tlsListening }}
              protocol: UDP
              {{- if .Values.hostPort }}
              hostPort: {{ .Values.coturn.ports.tlsListening }}
              {{- end }}
          volumeMounts:
            - name: {{ .Release.Name }}-config
              mountPath: "/turnserver.conf"
              subPath: turnserver.conf
              readOnly: true
            {{- if .Values.certificate.enabled }}
            - name: tls
              mountPath: /tls
              readOnly: true
            {{- end }}
            - name: var-tmp
              mountPath: /var/tmp
          {{- with .Values.resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}
      volumes:
        {{- if .Values.certificate.enabled }}
        - name: tls
          secret:
            secretName: {{ .Values.certificate.secret }}
        {{- end }}
        - name: {{ .Release.Name }}-initial-config
          configMap:
            name: {{ .Release.Name }}-initial-config
        - name: {{ .Release.Name }}-extra-config
          configMap:
            name: {{ .Release.Name }}-extra-config
        - name: {{ .Release.Name }}-config
          persistentVolumeClaim:
            {{- if .Values.persistence.existingClaim }}
            claimName: {{ .Values.persistence.existingClaim }}
            {{ else }}
            claimName: {{ .Release.Name }}-config
            {{- end }}
        - name: var-tmp
          emptyDir: {}
      {{- with .Values.affinity }}
      affinity:
        {{ toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.hostAliases }}
      hostAliases:
      {{ toYaml . | nindent 6 }}
      {{- end }}
      hostNetwork: {{ .Values.hostNetwork }}
